name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Check if version changed (for automatic releases)
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: check
        run: |
          if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install ImageMagick (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y imagemagick
        
      - name: Install ImageMagick (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install imagemagick
        
      - name: Install ImageMagick (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install imagemagick -y
          refreshenv
        
      - name: Build icons
        run: npm run build:icons
        
      - name: Build CSS
        run: npm run build:css
        
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        
      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        
      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        
      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            dist/*.exe
            dist/*.exe.blockmap
            dist/latest.yml
          retention-days: 30
          
      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.dmg.blockmap
            dist/*.zip.blockmap
            dist/latest-mac.yml
          retention-days: 30
          
      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.tar.gz
            dist/*.AppImage.blockmap
            dist/latest-linux.yml
          retention-days: 30

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.version-changed == 'true' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Display structure of downloaded files
        run: ls -la artifacts/
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Pairkiller v${{ needs.check-version.outputs.version }}
          body: |
            ## Pairkiller v${{ needs.check-version.outputs.version }}
            
            ### Downloads
            
            **Windows:**
            - `Pairkiller-Setup-${{ needs.check-version.outputs.version }}.exe` - Windows Installer (Recommended)
            - `Pairkiller-${{ needs.check-version.outputs.version }}-x64.exe` - Portable Version
            
            **macOS:**
            - `Pairkiller-${{ needs.check-version.outputs.version }}-x64.dmg` - Intel Macs
            - `Pairkiller-${{ needs.check-version.outputs.version }}-arm64.dmg` - Apple Silicon
            
            **Linux:**
            - `Pairkiller-${{ needs.check-version.outputs.version }}-x64.AppImage` - Universal Linux
            - `Pairkiller-${{ needs.check-version.outputs.version }}-x64.deb` - Debian/Ubuntu
            
            ### Installation Notes
            
            - **Windows**: Run the installer as administrator if you encounter issues
            - **macOS**: You may need to allow the app in System Preferences > Security & Privacy
            - **Linux**: Make the AppImage executable: `chmod +x Pairkiller-*.AppImage`
            
            ### Auto-Updates
            
            This version includes auto-update functionality. The app will check for updates automatically.
          draft: false
          prerelease: false
          
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-installers/Pairkiller-Setup-${{ needs.check-version.outputs.version }}.exe
          asset_name: Pairkiller-Setup-${{ needs.check-version.outputs.version }}.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Windows Portable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-installers/Pairkiller-${{ needs.check-version.outputs.version }}-x64.exe
          asset_name: Pairkiller-${{ needs.check-version.outputs.version }}-x64.exe
          asset_content_type: application/octet-stream
          
      - name: Upload macOS DMG (Intel)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos-installers/Pairkiller-${{ needs.check-version.outputs.version }}-x64.dmg
          asset_name: Pairkiller-${{ needs.check-version.outputs.version }}-x64.dmg
          asset_content_type: application/octet-stream
          
      - name: Upload macOS DMG (Apple Silicon)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos-installers/Pairkiller-${{ needs.check-version.outputs.version }}-arm64.dmg
          asset_name: Pairkiller-${{ needs.check-version.outputs.version }}-arm64.dmg
          asset_content_type: application/octet-stream
          
      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-installers/Pairkiller-${{ needs.check-version.outputs.version }}-x64.AppImage
          asset_name: Pairkiller-${{ needs.check-version.outputs.version }}-x64.AppImage
          asset_content_type: application/octet-stream
          
      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux-installers/Pairkiller-${{ needs.check-version.outputs.version }}-x64.deb
          asset_name: Pairkiller-${{ needs.check-version.outputs.version }}-x64.deb
          asset_content_type: application/octet-stream